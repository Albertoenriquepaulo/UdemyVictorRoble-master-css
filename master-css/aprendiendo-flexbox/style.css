body {
  font-family: Arial, Helvetica, sans-serif;
  text-align: center;
}

#layout {
  display: flex; /*con esto el tamaño del div layout se adapta al contenidod e la caja */
  /*flex-direction: unset;*/
  /*flex-wrap: wrap;*/ /*Hace que el layout arrope todo su contenido (evita que se slagan los elementos del div layout en este caso), si pasa el tamaño los pasa a el row de abajo*/
  flex-flow: row wrap; /*Une la dirección y el wrap en una sola linea, equivale a escribir flex-direction y flex-wrap*/

  border: 3px solid black;
  padding: 5px;
}

/*Usaremos flex-grow, pero esta no puede ser usada dentro de la layout. Se usa en los elementos hijos del container de flex
flex-grow, permitirá adaptar el tamaño de cada una de las cajas a nuestro antojo, veamos ejemplo aqui abajo
*/
.caja {
  flex-grow: 1; /*Valor 1 siginifica que cada elemento que tenga esta propiedad ocupará el mismo espacio dentro del contenedor de flexbox.
  Esta propiedad dirá cuanto puede crecer un elemento dentro de un contenedor, para esto le aplicaremos esta propiedad a cada elemento individualmente, ver .red, .blue...*/

  font-size: 20px;
  font-weight: bold;
  text-align: center;
  color: white;
  padding: 20px;
  border: 4px solid #222;
  margin: 10px;
  background: gray;
}

.red {
  flex-grow: 5;
  background: red;
}

/*Con flex-grow vimos como aumentar el tamaño, con shrink podemos contraer el tamaño, aqui abajo le aplicamos ambos a cero y disminuimos un poco el tamaño de la caja green*/
.green {
  flex-grow: 0;
  flex-shrink: 0;
  background: green;
}
.blue {
  background: blue;
}
.orange {
  flex-grow: 10;
  background: orange;
}
